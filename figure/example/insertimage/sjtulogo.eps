%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: sjtulogo.pdf
%%Creator: Adobe Acrobat 10.1.13
%%For: jianwen
%%CreationDate: 15/2/14, 上午12:09
%%BoundingBox: 0 0 287 287
%%HiResBoundingBox: 0 0 286.5299 286.5299
%%CropBox: 0 0 286.5299 286.5299
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1177 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-12-28T18:31:40-08:00"
   xmp:ModifyDate="2015-02-14T00:08:58+08:00"
   xmp:MetadataDate="2015-02-14T00:08:58+08:00"
   pdf:Keywords=""
   pdf:Producer="ReportLab http://www.reportlab.com"
   xmpMM:DocumentID="uuid:31e4ec8d-f53d-2c4c-a10d-b55dc4046415"
   xmpMM:InstanceID="uuid:f4e4fd9d-899e-274c-adce-75452c2d948c">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>anonymous</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">unspecified</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -286.53 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52587e-05 0 mo
1.52587e-05 286.53 li
286.53 286.53 li
286.53 0 li
cp
clp
143.056 1.76935 mo
64.8965 1.76935 1.30769 65.3585 1.30769 143.52 cv
1.30769 221.682 64.8965 285.271 143.056 285.271 cv
221.218 285.271 284.806 221.682 284.806 143.52 cv
284.806 65.3585 221.218 1.76935 143.056 1.76935 cv
cp
281.341 143.52 mo
281.341 219.771 219.308 281.806 143.056 281.806 cv
66.8058 281.806 4.7709 219.771 4.7709 143.52 cv
4.7709 67.2687 66.8058 5.23407 143.056 5.23407 cv
219.308 5.23407 281.341 67.2687 281.341 143.52 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .8 0 0 cmyk
ef
143.056 7.05609 mo
67.81 7.05609 6.5901 68.2739 6.5901 143.521 cv
6.5901 218.768 67.81 279.986 143.056 279.986 cv
218.304 279.986 279.522 218.768 279.522 143.521 cv
279.522 68.2739 218.304 7.05609 143.056 7.05609 cv
cp
278.223 143.521 mo
278.223 218.052 217.588 278.689 143.056 278.689 cv
68.525 278.689 7.8914 218.052 7.8914 143.521 cv
7.8914 68.989 68.525 8.35541 143.056 8.35541 cv
217.588 8.35541 278.223 68.989 278.223 143.521 cv
cp
ef
99.964 21.6759 mo
99.7718 26.7727 104.5 24.0965 107.512 23.8643 cv
108.568 23.7843 118.086 20.0687 116.751 23.9802 cv
115.923 26.4107 112.801 25.6087 110.87 25.8295 cv
108.562 26.0965 105.958 26.9326 103.845 27.9019 cv
101.779 28.8471 103.318 30.177 104.971 29.7631 cv
106.488 29.3781 107.925 29.238 109.495 29.3279 cv
113.246 29.5479 117.2 30.6351 120.288 32.8243 cv
121.861 33.9405 126.348 38.382 123.52 39.7264 cv
121.811 40.5375 119.459 38.1572 118.239 37.0921 cv
116.272 35.3766 114.967 33.8576 112.378 33.0426 cv
107.712 31.5723 102.95 32.4844 99.2479 35.6879 cv
95.8793 38.6082 93.4001 41.9286 92.6131 46.3401 cv
92.2879 48.1634 91.499 54.7111 88.4924 52.54 cv
85.1729 50.1425 89.9057 42.3527 90.7777 40.9676 cv
91.2118 40.2764 92.0399 39.3573 92.9281 38.3922 cv
93.503 37.7671 94.8012 36.2447 95.7883 35.1158 cv
96.3244 34.4998 98.0878 32.8266 98.7909 32.2703 cv
99.8319 31.4493 100.266 29.9831 98.3296 30.0712 cv
96.4996 30.15 95.6914 31.2381 93.4602 32.1773 cv
91.2319 33.1186 85.5052 38.3911 84.4168 35.2678 cv
83.0728 31.4011 91.6319 29.845 93.9512 28.9239 cv
94.4882 28.7099 95.2173 28.4578 95.7863 28.2438 cv
96.2405 28.0728 96.8415 27.6708 96.9195 27.5668 cv
97.3935 26.9388 97.7385 26.0225 97.5517 25.5656 cv
97.0797 24.4205 96.2326 23.0013 96.2306 21.805 cv
97.1687 20.9519 98.9669 20.8889 99.964 21.6759 cv
cp
ef
92.405 178.164 mo
82.3867 172.803 li
79.0612 178.602 li
81.4605 180.241 82.6209 182.721 82.9449 185.587 cv
100.812 195.15 li
106.283 185.591 li
97.3356 180.806 li
124.997 129.305 li
125.123 129.097 125.071 128.881 124.813 128.735 cv
120.582 126.477 li
120.289 126.34 120.102 126.415 119.983 126.632 cv
92.405 178.166 li
92.405 178.164 li
cp
ef
108.932 182.18 mo
181.598 182.18 li
183.076 182.18 184.283 183.396 184.283 184.881 cv
184.283 201.588 li
184.283 203.078 183.076 204.294 181.598 204.294 cv
108.932 204.294 li
107.452 204.294 106.241 203.078 106.241 201.588 cv
106.241 184.881 li
106.241 183.391 107.452 182.179 108.932 182.179 cv
109.825 184.531 mo
180.457 184.531 li
181.262 184.531 181.92 185.19 181.92 186.002 cv
181.92 200.468 li
181.92 201.277 181.262 201.942 180.457 201.942 cv
110.172 201.942 li
109.365 201.942 108.704 201.277 108.704 200.468 cv
108.704 185.647 li
108.704 185.035 109.209 184.532 109.819 184.532 cv
109.825 184.531 li
cp
ef
104.063 104.847 mo
128.746 104.847 li
128.746 99.4578 li
104.063 99.4578 li
104.063 104.847 li
cp
ef
104.063 113.047 mo
128.746 113.047 li
128.746 107.657 li
104.063 107.657 li
104.063 113.047 li
cp
ef
104.063 121.249 mo
128.746 121.249 li
128.746 115.859 li
104.063 115.859 li
104.063 121.249 li
cp
ef
198.943 151.831 mo
200.481 151.831 li
200.911 151.831 201.257 152.118 201.257 152.449 cv
201.257 154.225 li
202.04 153.787 202.573 152.957 202.573 152.003 cv
202.573 144.637 li
202.573 143.684 202.04 142.846 201.257 142.412 cv
201.257 143.86 li
201.257 144.195 200.906 144.482 200.481 144.482 cv
198.943 144.482 li
198.518 144.482 198.166 144.2 198.166 143.86 cv
198.166 142.412 li
197.383 142.846 196.854 143.681 196.854 144.637 cv
196.854 152.003 li
196.854 152.957 197.385 153.787 198.166 154.225 cv
198.166 152.449 li
198.166 152.112 198.512 151.831 198.943 151.831 cv
cp
98.9369 130.6 mo
98.0668 130.587 97.2446 130.653 96.7984 131.354 cv
95.4623 133.467 95.7625 139.286 95.7625 141.609 cv
89.4155 141.609 li
87.8333 140.058 li
87.8333 129.465 li
89.3687 126.985 93.2331 125.14 100.362 125.148 cv
115.786 125.164 li
116.27 125.164 116.452 125.576 116.31 125.839 cv
107.85 141.591 li
98.9369 141.609 li
98.9369 130.595 li
98.9369 130.6 li
cp
120.945 144.433 mo
143.462 144.433 li
144.225 144.433 144.845 145.059 144.845 145.813 cv
144.845 147.221 li
144.845 147.975 144.218 148.603 143.462 148.603 cv
119.249 148.603 li
120.525 149.631 121.873 151.737 122.536 153.03 cv
124.393 153.03 li
124.393 153.03 127.902 155.104 127.493 157.808 cv
127.079 160.503 126.249 161.121 123.774 163.197 cv
121.298 165.276 116.751 169.841 114.896 172.334 cv
113.036 174.824 113.036 178.558 115.101 178.558 cv
144.834 178.558 li
144.834 178.563 li
174.772 178.563 li
175.065 178.563 175.311 178.49 175.522 178.352 cv
176.805 177.533 176.58 174.473 174.981 172.334 cv
173.12 169.845 168.581 165.276 166.105 163.197 cv
163.626 161.121 162.801 160.5 162.385 157.808 cv
162.221 156.714 162.695 155.728 163.322 154.933 cv
163.334 154.913 163.351 154.892 163.363 154.878 cv
163.373 154.871 li
163.385 154.85 163.398 154.841 163.408 154.824 cv
163.41 154.824 163.414 154.816 163.414 154.811 cv
163.428 154.794 163.445 154.776 163.455 154.767 cv
163.455 154.761 163.455 154.756 163.46 154.756 cv
163.475 154.74 163.492 154.724 163.506 154.707 cv
163.508 154.707 163.508 154.7 163.508 154.7 cv
163.527 154.685 163.539 154.668 163.553 154.647 cv
163.558 154.647 li
163.576 154.63 163.592 154.607 163.611 154.591 cv
163.611 154.585 li
163.631 154.567 163.644 154.543 163.666 154.526 cv
163.732 154.462 li
163.74 154.45 163.756 154.435 163.766 154.417 cv
164.598 153.56 165.48 153.035 165.49 153.03 cv
167.348 153.03 li
168.358 150.668 170.042 148.75 171.692 147.304 cv
174.104 145.194 176.432 144.096 176.432 144.096 cv
181.803 144.096 li
186.28 138.959 192.118 137.18 198.172 136.155 cv
198.172 139.309 li
196.066 139.504 194.398 141.29 194.398 143.44 cv
194.398 153.275 li
194.398 155.435 196.066 157.218 198.172 157.411 cv
198.172 162.898 li
196.066 163.085 194.398 164.877 194.398 167.03 cv
194.398 176.661 li
194.398 178.949 196.26 180.81 198.545 180.81 cv
200.894 180.81 li
203.173 180.81 205.042 178.949 205.042 176.661 cv
205.042 167.03 li
205.042 164.877 203.372 163.085 201.268 162.898 cv
201.268 157.411 li
203.374 157.218 205.042 155.435 205.042 153.275 cv
205.042 143.44 li
205.042 141.29 203.372 139.503 201.268 139.309 cv
201.268 135.682 li
202.011 135.581 202.745 135.401 203.491 135.303 cv
211.25 134.017 211.213 131.126 211.213 131.366 cv
211.213 125.21 li
126.034 125.21 li
129.553 127.049 li
129.844 127.175 130.033 127.515 129.806 127.883 cv
120.949 144.427 li
120.945 144.433 li
cp
201.26 166.004 mo
201.26 167.346 li
201.26 167.689 200.911 167.971 200.485 167.971 cv
198.943 167.971 li
198.518 167.971 198.166 167.689 198.166 167.346 cv
198.166 166.004 li
197.385 166.433 196.854 167.273 196.854 168.227 cv
196.854 175.388 li
196.854 176.788 198.002 177.931 199.393 177.931 cv
200.035 177.931 li
201.427 177.931 202.575 176.784 202.575 175.388 cv
202.575 168.227 li
202.575 167.273 202.046 166.441 201.26 166.004 cv
cp
123.835 169.982 mo
165.695 169.982 li
166.453 169.982 167.082 170.608 167.082 171.366 cv
167.082 172.772 li
167.082 173.532 166.453 174.156 165.695 174.156 cv
123.835 174.156 li
123.074 174.156 122.452 173.532 122.452 172.772 cv
122.452 171.366 li
122.452 170.608 123.074 169.982 123.835 169.982 cv
cp
131.189 160.943 mo
158.343 160.943 li
159.104 160.943 159.725 161.572 159.725 162.332 cv
159.725 163.734 li
159.725 164.498 159.104 165.119 158.343 165.119 cv
131.189 165.119 li
130.434 165.119 129.799 164.498 129.799 163.734 cv
129.799 162.332 li
129.799 161.572 130.424 160.943 131.189 160.943 cv
cp
132.226 152.43 mo
157.307 152.43 li
158.063 152.43 158.69 153.057 158.69 153.813 cv
158.69 155.218 li
158.69 155.975 158.059 156.601 157.307 156.601 cv
132.226 156.601 li
131.472 156.601 130.844 155.979 130.844 155.218 cv
130.844 153.813 li
130.844 153.052 131.464 152.43 132.226 152.43 cv
cp
154.011 144.433 mo
165.258 144.433 li
166.021 144.433 166.641 145.059 166.641 145.813 cv
166.641 147.221 li
166.641 147.975 166.01 148.603 165.258 148.603 cv
154.011 148.603 li
153.274 148.603 152.629 147.975 152.629 147.221 cv
152.629 145.813 li
152.629 145.049 153.253 144.433 154.011 144.433 cv
cp
ef
130.737 104.847 mo
134.99 104.847 li
134.99 99.4578 li
130.737 99.4578 li
130.737 104.847 li
cp
ef
107.286 94.5431 mo
114.83 94.1312 122.994 91.5938 130.106 87.9863 cv
132.322 92.886 li
124.489 96.6504 115.674 99.1667 108.575 99.5228 cv
107.286 94.5431 li
cp
ef
135.843 85.2369 mo
131.979 87.1001 li
134.192 91.9389 li
138.071 90.0576 li
135.843 85.2409 li
135.843 85.2369 li
cp
ef
130.737 113.047 mo
134.99 113.047 li
134.99 107.657 li
130.737 107.657 li
130.737 113.047 li
cp
ef
130.737 121.249 mo
134.99 121.249 li
134.99 115.859 li
130.737 115.859 li
130.737 121.249 li
cp
ef
160.819 91.5587 mo
168.623 87.2543 li
185.042 117.042 li
177.238 121.341 li
160.819 91.5587 li
cp
165.785 95.6842 mo
169.29 93.7272 li
170.237 95.3772 li
166.732 97.3344 li
165.785 95.6842 li
cp
167.783 99.2707 mo
171.294 97.3166 li
172.241 98.9625 li
168.729 100.917 li
167.783 99.2707 li
cp
ef
151.631 83.3828 mo
161.013 83.3828 li
161.013 121.309 li
151.631 121.309 li
151.631 83.3828 li
cp
138.055 79.8833 mo
148.554 79.8833 li
148.554 121.313 li
138.055 121.313 li
138.055 79.8833 li
cp
141.295 85.2369 mo
145.314 85.2369 li
145.314 87.1092 li
141.295 87.1092 li
141.295 85.2369 li
cp
141.295 89.3484 mo
145.314 89.3484 li
145.314 91.2216 li
141.295 91.2216 li
141.295 89.3484 li
cp
141.295 93.4559 mo
145.314 93.4559 li
145.314 95.3303 li
141.295 95.3303 li
141.295 93.4559 li
cp
141.295 97.5647 mo
145.314 97.5647 li
145.314 99.4377 li
141.295 99.4377 li
141.295 97.5647 li
cp
154.313 89.3484 mo
158.333 89.3484 li
158.333 91.2216 li
154.313 91.2216 li
154.313 89.3484 li
cp
154.313 93.4559 mo
158.333 93.4559 li
158.333 95.3303 li
154.313 95.3303 li
154.313 93.4559 li
cp
154.313 97.5647 mo
158.333 97.5647 li
158.333 99.4377 li
154.313 99.4377 li
154.313 97.5647 li
cp
ef
143.029 224.155 mo
98.6049 224.155 62.4342 187.963 62.4342 143.57 cv
62.4342 99.1278 98.6049 62.9342 143.029 62.9342 cv
187.456 62.9342 223.679 99.1278 223.679 143.57 cv
223.679 187.963 187.456 224.155 143.029 224.155 cv
cp
241.238 140.919 mo
233.536 139.921 li
233.234 139.871 233.034 139.77 232.835 139.52 cv
232.781 138.271 232.734 137.021 232.635 135.82 cv
232.734 135.57 232.937 135.421 233.234 135.372 cv
240.738 133.371 li
240.84 133.32 240.988 133.271 240.988 132.971 cv
240.888 132.32 240.84 131.571 240.689 130.722 cv
240.689 130.671 li
240.689 130.623 li
240.588 129.82 240.488 129.071 240.389 128.42 cv
240.34 128.121 240.189 128.121 240.036 128.121 cv
232.281 128.121 li
231.983 128.121 231.733 128.021 231.582 127.821 cv
231.332 126.622 231.082 125.422 230.83 124.173 cv
230.934 123.923 231.082 123.774 231.381 123.673 cv
238.587 120.674 li
238.687 120.624 238.837 120.573 238.737 120.274 cv
238.587 119.623 238.437 118.924 238.187 118.125 cv
238.187 118.074 li
238.187 118.024 li
237.937 117.224 237.735 116.475 237.585 115.824 cv
237.485 115.576 237.337 115.576 237.185 115.576 cv
229.481 116.624 li
229.182 116.675 228.983 116.624 228.731 116.425 cv
228.381 115.225 227.981 114.076 227.531 112.924 cv
227.631 112.625 227.781 112.424 228.031 112.275 cv
234.786 108.426 li
234.886 108.375 234.987 108.276 234.886 108.025 cv
234.687 107.376 234.384 106.676 234.087 105.926 cv
234.034 105.876 li
234.034 105.827 li
233.685 105.025 233.386 104.375 233.134 103.726 cv
233.034 103.477 232.884 103.526 232.734 103.526 cv
225.231 105.577 li
224.93 105.676 224.678 105.626 224.428 105.426 cv
223.927 104.326 223.376 103.276 222.829 102.227 cv
222.829 101.876 222.976 101.677 223.23 101.476 cv
229.383 96.7785 li
229.481 96.6764 229.582 96.5764 229.481 96.3274 cv
229.133 95.7284 228.781 95.0771 228.381 94.3772 cv
228.381 94.3772 228.381 94.3282 228.332 94.3282 cv
228.332 94.28 li
227.883 93.5279 227.531 92.877 227.182 92.3289 cv
227.031 92.0789 226.881 92.1288 226.731 92.179 cv
219.575 95.1781 li
219.274 95.3281 219.026 95.2782 218.726 95.1271 cv
218.073 94.1272 217.425 93.1781 216.774 92.2289 cv
216.672 91.8768 216.774 91.6287 217.024 91.3787 cv
222.526 85.881 li
222.628 85.7801 222.728 85.68 222.577 85.43 cv
222.179 84.9299 221.726 84.3289 221.228 83.6309 cv
221.177 83.6309 li
221.177 83.5807 li
221.128 83.5807 li
220.626 82.8816 220.177 82.3305 219.776 81.7816 cv
219.575 81.5806 219.425 81.6297 219.325 81.7306 cv
212.621 85.5791 li
212.318 85.7801 212.022 85.7801 211.721 85.6301 cv
210.969 84.7799 210.219 83.8798 209.42 83.0316 cv
209.32 82.7296 209.369 82.4297 209.57 82.1805 cv
214.324 76.0319 li
214.422 75.9319 214.473 75.7819 214.272 75.5798 cv
213.822 75.0817 213.322 74.5326 212.721 73.9817 cv
212.721 73.9315 li
212.672 73.9315 li
212.672 73.8825 li
212.621 73.8825 li
212.07 73.2826 211.522 72.7825 211.022 72.3314 cv
210.82 72.1313 210.67 72.2334 210.57 72.2823 cv
204.419 77.0319 li
204.167 77.23 203.864 77.2819 203.565 77.181 cv
202.716 76.4309 201.817 75.6308 200.961 74.9317 cv
200.817 74.5807 200.817 74.3327 201.016 74.0327 cv
204.917 67.2837 li
204.966 67.1828 205.016 67.0317 204.817 66.8817 cv
204.266 66.4335 203.716 65.9836 203.016 65.4835 cv
203.016 65.4336 li
202.966 65.4336 li
202.966 65.3834 li
202.265 64.8844 201.664 64.4342 201.165 64.0334 cv
200.915 63.8842 200.817 63.9824 200.716 64.0833 cv
195.213 69.5821 li
194.961 69.8321 194.711 69.933 194.412 69.882 cv
193.412 69.1829 192.46 68.534 191.458 67.8828 cv
191.308 67.6327 191.259 67.3316 191.41 67.0317 cv
194.412 59.8838 li
194.461 59.7347 194.512 59.5827 194.258 59.4339 cv
193.711 59.0846 193.061 58.7356 192.312 58.2837 cv
192.261 58.2837 li
192.261 58.2837 192.261 58.2356 192.212 58.2356 cv
191.509 57.8347 190.858 57.4854 190.259 57.1336 cv
190.009 57.0355 189.909 57.1336 189.81 57.2353 cv
185.108 63.3842 li
184.905 63.6853 184.704 63.7842 184.355 63.7842 cv
183.305 63.2334 182.254 62.6842 181.152 62.185 cv
180.951 61.9352 180.904 61.684 181.004 61.3841 cv
183.057 53.8841 li
183.057 53.7851 183.103 53.5841 182.855 53.4869 cv
182.203 53.2349 181.555 52.9349 180.752 52.5848 cv
180.703 52.5848 li
180.652 52.5848 li
179.9 52.2358 179.203 51.9869 178.553 51.7357 cv
178.305 51.6356 178.203 51.7848 178.152 51.8857 cv
174.302 58.5845 li
174.147 58.8847 173.948 59.0336 173.649 59.0846 cv
172.497 58.6347 171.349 58.2356 170.147 57.8845 cv
169.948 57.6836 169.897 57.4347 169.948 57.1336 cv
170.999 49.4354 li
170.999 49.2854 170.999 49.1366 170.749 49.0864 cv
170.096 48.8866 169.345 48.6856 168.547 48.4862 cv
168.547 48.4364 li
168.494 48.4364 li
168.447 48.4364 li
167.647 48.2365 166.943 48.0363 166.293 47.8864 cv
165.994 47.8362 165.943 47.9354 165.894 48.0862 cv
162.892 55.2361 li
162.793 55.5343 162.642 55.6851 162.392 55.7852 cv
161.144 55.5343 159.942 55.2851 158.741 55.0351 cv
158.542 54.8852 158.44 54.6362 158.44 54.3332 cv
158.44 46.5851 li
158.44 46.4862 158.44 46.2859 158.141 46.2859 cv
157.491 46.136 156.739 46.037 155.936 45.9362 cv
155.888 45.9362 li
155.841 45.9362 li
154.989 45.8369 154.239 45.7371 153.587 45.687 cv
153.288 45.6379 153.237 45.787 153.237 45.886 cv
151.185 53.3852 li
151.134 53.6839 150.986 53.8841 150.734 54.0341 cv
149.537 53.9351 148.283 53.8362 147.032 53.7851 cv
146.832 53.6349 146.682 53.3852 146.682 53.0849 cv
145.68 45.387 li
145.633 45.2861 145.582 45.137 145.332 45.137 cv
144.98 45.0871 144.633 45.0871 144.231 45.0871 cv
144.132 45.0871 li
144.081 45.0871 li
143.98 45.0871 li
143.93 45.0871 li
143.88 45.0871 li
143.832 45.0871 li
143.781 45.0871 li
143.731 45.0871 li
143.681 45.0871 li
143.632 45.0871 li
143.532 45.0871 li
143.48 45.0871 li
143.33 45.0871 li
143.281 45.0871 li
143.232 45.0871 li
143.181 45.0871 li
143.13 45.0871 li
143.081 45.0871 li
143.029 45.0871 li
142.981 45.0871 li
142.931 45.0871 li
142.882 45.0871 li
142.83 45.0871 li
142.78 45.0871 li
142.73 45.0871 li
142.678 45.0871 li
142.631 45.0871 li
142.581 45.0871 li
142.53 45.0871 li
142.481 45.0871 li
142.429 45.0871 li
142.378 45.0871 li
142.33 45.0871 li
142.282 45.0871 li
142.229 45.0871 li
142.18 45.0871 li
142.128 45.0871 li
141.78 45.0871 li
141.38 45.0871 141.029 45.0871 140.678 45.137 cv
140.43 45.137 140.378 45.2861 140.378 45.387 cv
139.378 53.0849 li
139.329 53.3852 139.227 53.6349 138.979 53.7851 cv
137.726 53.8362 136.524 53.9351 135.275 54.0341 cv
135.078 53.8841 134.927 53.6839 134.876 53.3852 cv
132.875 45.886 li
132.824 45.787 132.775 45.6379 132.525 45.687 cv
131.825 45.7371 131.074 45.8369 130.273 45.9362 cv
130.223 45.9362 li
130.174 45.9362 li
129.323 46.037 128.573 46.136 127.922 46.2859 cv
127.671 46.2859 127.622 46.4862 127.622 46.5851 cv
127.622 54.3332 li
127.671 54.6362 127.573 54.8852 127.371 55.0351 cv
126.121 55.2851 124.92 55.5343 123.72 55.7852 cv
123.42 55.6851 123.27 55.5343 123.17 55.2361 cv
120.217 48.0862 li
120.168 47.9354 120.066 47.8362 119.818 47.8864 cv
119.166 48.0363 118.417 48.2365 117.617 48.4364 cv
117.566 48.4364 li
117.517 48.4364 117.517 48.4364 117.517 48.4862 cv
116.716 48.6856 115.965 48.8866 115.365 49.0864 cv
115.064 49.1366 115.115 49.2854 115.115 49.4354 cv
116.115 57.1336 li
116.166 57.4347 116.115 57.6836 115.915 57.8845 cv
114.765 58.2356 113.564 58.6347 112.414 59.0846 cv
112.164 59.0336 111.963 58.8847 111.812 58.5845 cv
107.911 51.8857 li
107.862 51.7848 107.76 51.6356 107.51 51.7357 cv
106.86 51.9869 106.21 52.2358 105.409 52.5848 cv
105.36 52.5848 li
105.31 52.5848 li
104.558 52.9349 103.857 53.2349 103.257 53.4869 cv
103.008 53.5841 103.008 53.7851 103.058 53.8841 cv
105.059 61.3841 li
105.159 61.684 105.109 61.9352 104.96 62.185 cv
103.857 62.6842 102.757 63.2334 101.709 63.7842 cv
101.408 63.7842 101.158 63.6853 100.957 63.3842 cv
96.3034 57.2353 li
96.2045 57.1336 96.1044 57.0355 95.8544 57.1336 cv
95.3032 57.4854 94.6033 57.8347 93.903 58.2356 cv
93.903 58.2837 li
93.8512 58.2837 li
93.8032 58.2837 li
93.1021 58.7356 92.4521 59.0846 91.8519 59.4339 cv
91.6509 59.5827 91.7019 59.7347 91.7518 59.8838 cv
94.7022 67.0317 li
94.8522 67.3316 94.8522 67.6327 94.6532 67.8828 cv
93.702 68.534 92.7021 69.1829 91.7518 69.882 cv
91.4017 69.933 91.1508 69.8321 90.9019 69.5821 cv
85.4482 64.0833 li
85.349 63.9824 85.197 63.8842 84.9972 64.0334 cv
84.4469 64.4342 83.847 64.8844 83.1958 65.3834 cv
83.1468 65.4336 li
83.0949 65.4336 li
83.0949 65.4835 li
82.4468 65.9836 81.8446 66.4335 81.3446 66.8817 cv
81.0965 67.0317 81.1966 67.1828 81.2456 67.2837 cv
85.148 74.0327 li
85.298 74.3327 85.349 74.5807 85.197 74.9317 cv
84.2961 75.6308 83.447 76.4309 82.5968 77.181 cv
82.2458 77.2819 81.9447 77.23 81.6947 77.0319 cv
75.5419 72.2823 li
75.4409 72.2334 75.2918 72.1313 75.0917 72.3314 cv
74.5899 72.7825 74.0906 73.2826 73.4908 73.8825 cv
73.4417 73.9315 li
73.4417 73.9315 73.4417 73.9817 73.3907 73.9817 cv
72.8396 74.5326 72.2896 75.0817 71.8394 75.5798 cv
71.6384 75.7819 71.7404 75.9319 71.7895 76.0319 cv
76.5421 82.1805 li
76.7431 82.4297 76.7921 82.7296 76.692 83.0316 cv
75.9419 83.8798 75.1898 84.7799 74.4416 85.6301 cv
74.0906 85.7801 73.8397 85.7801 73.5415 85.5791 cv
66.7868 81.7306 li
66.6868 81.6297 66.5376 81.5806 66.3877 81.7816 cv
65.9358 82.3305 65.4856 82.8816 64.9855 83.5807 cv
64.9344 83.5807 li
64.9344 83.6309 li
64.3856 84.3289 63.9345 84.9299 63.5833 85.43 cv
63.3843 85.68 63.4843 85.7801 63.5833 85.881 cv
69.0871 91.3787 li
69.3372 91.6287 69.4381 91.8768 69.3891 92.2289 cv
68.6871 93.1781 68.0379 94.1272 67.3859 95.1271 cv
67.1358 95.2782 66.8367 95.3281 66.5376 95.1781 cv
59.3818 92.179 li
59.2837 92.1288 59.1329 92.0789 58.9818 92.3289 cv
58.6308 92.877 58.2316 93.5279 57.8308 94.28 cv
57.7817 94.28 li
57.7817 94.3282 li
57.7817 94.3772 li
57.3307 95.0771 56.9814 95.7284 56.6815 96.3274 cv
56.5304 96.5764 56.6304 96.6764 56.7316 96.7785 cv
62.9332 101.476 li
63.1844 101.677 63.2853 101.876 63.2853 102.227 cv
62.7342 103.276 62.2352 104.326 61.6821 105.426 cv
61.4321 105.626 61.184 105.676 60.8829 105.577 cv
53.377 103.526 li
53.2792 103.526 53.1281 103.477 52.977 103.726 cv
52.7281 104.375 52.429 105.025 52.127 105.827 cv
52.0788 105.827 li
52.0788 105.876 li
52.0788 105.926 li
51.7279 106.676 51.479 107.376 51.2269 108.025 cv
51.1277 108.276 51.278 108.375 51.3777 108.426 cv
58.0817 112.275 li
58.3808 112.424 58.5319 112.625 58.5818 112.924 cv
58.1307 114.076 57.7817 115.225 57.3817 116.425 cv
57.1816 116.624 56.9307 116.675 56.6304 116.624 cv
48.9266 115.576 li
48.8265 115.576 48.6255 115.576 48.5756 115.824 cv
48.3763 116.475 48.1753 117.224 47.9755 118.024 cv
47.9264 118.024 li
47.9264 118.074 li
47.9264 118.125 li
47.7254 118.924 47.5253 119.623 47.3753 120.274 cv
47.3254 120.573 47.4754 120.624 47.5763 120.674 cv
54.7281 123.673 li
55.0292 123.774 55.1803 123.923 55.2804 124.173 cv
55.0292 125.422 54.7792 126.622 54.5802 127.821 cv
54.3803 128.073 54.1283 128.121 53.83 128.121 cv
46.0763 128.121 li
45.9742 128.121 45.8251 128.121 45.7741 128.42 cv
45.674 129.071 45.526 129.82 45.424 130.623 cv
45.424 130.671 li
45.424 130.722 li
45.323 131.571 45.2241 132.32 45.1731 132.971 cv
45.1252 133.271 45.2751 133.32 45.3752 133.371 cv
52.88 135.372 li
53.1791 135.421 53.377 135.57 53.5292 135.82 cv
53.43 137.021 53.3302 138.271 53.2792 139.52 cv
53.1281 139.77 52.9291 139.871 52.5781 139.921 cv
44.8731 140.919 li
44.7739 140.919 44.6231 140.97 44.6231 141.22 cv
44.5749 141.921 44.5749 142.67 44.5749 143.468 cv
44.5749 143.518 li
44.5749 143.57 li
44.5749 143.619 li
44.5749 144.418 44.5749 145.169 44.6231 145.868 cv
44.6231 146.12 44.7739 146.169 44.8731 146.169 cv
52.5781 147.168 li
52.9291 147.22 53.1281 147.318 53.2792 147.571 cv
53.3302 148.818 53.43 150.018 53.5292 151.269 cv
53.377 151.518 53.1791 151.669 52.88 151.717 cv
45.3752 153.717 li
45.2751 153.768 45.1252 153.818 45.1731 154.115 cv
45.2241 154.767 45.323 155.518 45.424 156.317 cv
45.424 156.369 li
45.424 156.419 li
45.424 156.468 li
45.526 157.267 45.6233 158.017 45.7741 158.668 cv
45.7741 158.966 45.9742 158.966 46.0763 158.966 cv
53.83 158.966 li
54.1283 158.966 54.3803 159.017 54.5802 159.216 cv
54.7792 160.466 55.0292 161.667 55.2804 162.919 cv
55.1803 163.167 55.0292 163.317 54.7281 163.417 cv
47.5763 166.415 li
47.4255 166.466 47.3254 166.514 47.3753 166.815 cv
47.5253 167.415 47.7254 168.166 47.9264 168.965 cv
47.9264 169.015 li
47.9264 169.065 li
47.9755 169.065 li
48.1753 169.866 48.3763 170.616 48.5756 171.264 cv
48.6255 171.515 48.8265 171.515 48.9266 171.515 cv
56.6304 170.465 li
56.9307 170.416 57.1816 170.465 57.3817 170.664 cv
57.7316 171.865 58.1307 173.016 58.5818 174.164 cv
58.5319 174.464 58.3808 174.664 58.0817 174.764 cv
51.3777 178.662 li
51.278 178.712 51.1277 178.814 51.2269 179.063 cv
51.479 179.713 51.7279 180.412 52.0788 181.162 cv
52.0788 181.213 li
52.0788 181.262 li
52.429 182.063 52.7281 182.712 52.977 183.362 cv
53.0782 183.563 53.2792 183.563 53.377 183.512 cv
60.8829 181.513 li
61.184 181.415 61.4321 181.462 61.6821 181.662 cv
62.1842 182.712 62.7342 183.812 63.2853 184.862 cv
63.2853 185.211 63.1844 185.412 62.8842 185.613 cv
56.7316 190.312 li
56.6304 190.412 56.5304 190.509 56.6304 190.761 cv
56.9814 191.361 57.3307 192.01 57.7316 192.711 cv
57.7817 192.711 57.7817 192.76 57.7817 192.76 cv
57.7817 192.812 li
57.8308 192.812 li
58.2316 193.563 58.6308 194.211 58.9818 194.76 cv
59.0819 194.961 59.2318 194.961 59.3818 194.911 cv
66.5376 191.91 li
66.8367 191.761 67.1358 191.81 67.3859 191.961 cv
68.0379 192.961 68.6871 193.911 69.3891 194.861 cv
69.4381 195.213 69.3372 195.462 69.0871 195.712 cv
63.5833 201.211 li
63.4843 201.311 63.3843 201.41 63.5833 201.662 cv
63.9345 202.16 64.3856 202.76 64.8857 203.462 cv
64.9344 203.462 li
64.9344 203.509 li
64.9855 203.509 li
65.4856 204.209 65.9358 204.759 66.3877 205.308 cv
66.5376 205.51 66.6868 205.458 66.7868 205.361 cv
73.5415 201.51 li
73.8397 201.311 74.0906 201.311 74.4416 201.459 cv
75.1898 202.312 75.9419 203.211 76.692 204.06 cv
76.7921 204.36 76.7431 204.66 76.5421 204.911 cv
71.7895 211.058 li
71.7404 211.16 71.6384 211.309 71.8394 211.508 cv
72.2896 212.01 72.7897 212.558 73.3907 213.108 cv
73.3907 213.108 73.3907 213.157 73.4417 213.157 cv
73.4417 213.207 li
73.4908 213.207 li
74.0906 213.806 74.5899 214.306 75.0917 214.757 cv
75.2918 214.957 75.4409 214.859 75.5419 214.807 cv
81.6947 210.059 li
81.9447 209.856 82.2458 209.808 82.5446 209.907 cv
83.396 210.658 84.2961 211.46 85.148 212.158 cv
85.298 212.507 85.298 212.806 85.097 213.057 cv
81.2456 219.806 li
81.1436 219.907 81.0965 220.057 81.2935 220.257 cv
81.8446 220.657 82.4468 221.106 83.0949 221.606 cv
83.0949 221.657 li
83.1468 221.657 li
83.1468 221.705 li
83.847 222.205 84.4469 222.656 84.9972 223.055 cv
85.197 223.205 85.298 223.106 85.398 223.007 cv
90.9019 217.506 li
91.1508 217.257 91.4017 217.157 91.7518 217.206 cv
92.7021 217.907 93.6533 218.556 94.6532 219.207 cv
94.8012 219.455 94.8522 219.757 94.7022 220.057 cv
91.7019 227.205 li
91.6509 227.356 91.6509 227.506 91.8519 227.656 cv
92.403 228.008 93.0511 228.355 93.8032 228.805 cv
93.8512 228.805 li
93.8512 228.855 93.903 228.855 93.903 228.855 cv
94.6033 229.256 95.2533 229.605 95.8544 229.955 cv
96.1044 230.056 96.2045 229.955 96.3034 229.855 cv
100.957 223.705 li
101.158 223.407 101.357 223.305 101.709 223.305 cv
102.757 223.856 103.857 224.404 104.909 224.906 cv
105.109 225.155 105.159 225.406 105.059 225.705 cv
103.058 233.156 li
103.008 233.306 103.008 233.455 103.257 233.554 cv
103.857 233.806 104.507 234.104 105.31 234.456 cv
105.36 234.456 li
105.409 234.456 105.409 234.456 105.409 234.505 cv
106.161 234.805 106.86 235.103 107.51 235.303 cv
107.76 235.405 107.862 235.303 107.911 235.155 cv
111.812 228.506 li
111.914 228.206 112.112 228.056 112.414 228.008 cv
113.564 228.456 114.714 228.855 115.915 229.206 cv
116.115 229.405 116.166 229.656 116.115 229.955 cv
115.064 237.606 li
115.064 237.755 115.064 237.904 115.316 237.954 cv
115.965 238.153 116.716 238.353 117.517 238.603 cv
117.566 238.603 li
117.617 238.603 li
118.417 238.852 119.166 239.004 119.767 239.154 cv
120.066 239.255 120.119 239.106 120.168 239.004 cv
123.17 231.803 li
123.27 231.554 123.42 231.406 123.671 231.304 cv
124.92 231.554 126.121 231.803 127.371 232.006 cv
127.573 232.154 127.622 232.405 127.622 232.705 cv
127.622 240.455 li
127.622 240.603 127.622 240.755 127.922 240.803 cv
128.573 240.903 129.323 241.003 130.126 241.103 cv
130.174 241.103 li
130.223 241.103 li
130.273 241.103 li
131.074 241.253 131.825 241.305 132.474 241.403 cv
132.775 241.403 132.824 241.253 132.875 241.154 cv
134.876 233.655 li
134.927 233.355 135.078 233.156 135.275 233.055 cv
136.477 233.156 137.726 233.206 138.979 233.254 cv
139.227 233.455 139.329 233.655 139.378 233.956 cv
140.378 241.653 li
140.378 241.754 140.43 241.904 140.678 241.953 cv
142.128 241.953 li
142.18 241.953 li
142.229 241.953 li
142.282 241.953 li
142.33 241.953 li
142.378 241.953 li
142.429 241.953 li
142.481 241.953 li
142.53 241.953 li
142.581 241.953 li
142.631 241.953 li
142.678 241.953 li
142.73 241.953 li
142.78 241.953 li
142.83 241.953 li
142.882 241.953 li
142.931 241.953 li
142.981 241.953 li
143.029 241.953 li
143.081 241.953 li
143.13 241.953 li
143.181 241.953 li
143.232 241.953 li
143.281 241.953 li
143.33 241.953 li
143.48 241.953 li
143.532 241.953 li
143.632 241.953 li
143.681 241.953 li
143.731 241.953 li
143.781 241.953 li
143.832 241.953 li
143.88 241.953 li
143.93 241.953 li
143.98 241.953 li
144.081 241.953 li
144.132 241.953 li
144.231 241.953 li
144.931 241.953 li
145.031 241.953 li
145.082 241.953 li
145.332 241.953 li
145.582 241.904 145.633 241.754 145.68 241.653 cv
146.682 233.956 li
146.682 233.655 146.832 233.455 147.032 233.254 cv
148.283 233.206 149.537 233.156 150.734 233.055 cv
150.986 233.156 151.134 233.355 151.234 233.655 cv
153.237 241.154 li
153.237 241.253 153.339 241.403 153.587 241.403 cv
154.239 241.305 154.989 241.253 155.841 241.103 cv
155.888 241.103 li
155.936 241.103 li
156.788 241.003 157.491 240.903 158.192 240.803 cv
158.44 240.755 158.44 240.603 158.44 240.455 cv
158.44 232.705 li
158.44 232.405 158.542 232.154 158.741 232.006 cv
159.942 231.803 161.191 231.554 162.392 231.304 cv
162.642 231.406 162.842 231.554 162.943 231.803 cv
165.894 239.004 li
165.943 239.106 166.045 239.255 166.293 239.154 cv
166.943 239.004 167.647 238.852 168.494 238.603 cv
168.547 238.603 li
168.596 238.603 li
169.398 238.353 170.096 238.153 170.749 237.954 cv
170.999 237.904 170.999 237.755 170.999 237.606 cv
169.948 229.955 li
169.897 229.656 169.997 229.405 170.147 229.206 cv
171.349 228.855 172.497 228.456 173.649 228.008 cv
173.948 228.056 174.147 228.206 174.302 228.506 cv
178.152 235.155 li
178.252 235.303 178.352 235.405 178.603 235.303 cv
179.203 235.103 179.9 234.805 180.703 234.505 cv
180.703 234.456 li
180.752 234.456 li
181.555 234.104 182.254 233.806 182.855 233.554 cv
183.103 233.455 183.057 233.306 183.057 233.156 cv
181.004 225.705 li
180.951 225.406 180.951 225.155 181.152 224.906 cv
182.254 224.404 183.305 223.856 184.405 223.305 cv
184.704 223.305 184.958 223.407 185.108 223.705 cv
189.86 229.855 li
189.909 229.955 190.06 230.056 190.259 229.955 cv
190.858 229.605 191.509 229.256 192.261 228.855 cv
192.261 228.805 li
192.312 228.805 li
193.061 228.355 193.711 228.008 194.258 227.656 cv
194.512 227.506 194.461 227.356 194.412 227.205 cv
191.458 220.057 li
191.308 219.757 191.308 219.455 191.458 219.207 cv
192.46 218.556 193.461 217.907 194.412 217.206 cv
194.711 217.157 195.01 217.257 195.213 217.506 cv
200.716 223.007 li
200.817 223.106 200.915 223.205 201.165 223.055 cv
201.716 222.656 202.315 222.205 202.966 221.705 cv
202.966 221.657 li
203.016 221.657 li
203.016 221.657 203.016 221.606 203.065 221.606 cv
203.716 221.106 204.317 220.657 204.817 220.257 cv
205.016 220.057 204.966 219.907 204.917 219.806 cv
201.016 213.057 li
200.817 212.806 200.817 212.507 200.961 212.158 cv
201.866 211.46 202.716 210.658 203.565 209.907 cv
203.915 209.808 204.167 209.856 204.468 210.059 cv
210.621 214.807 li
210.721 214.859 210.82 214.957 211.022 214.757 cv
211.522 214.306 212.07 213.806 212.672 213.207 cv
212.672 213.157 li
212.721 213.157 li
212.721 213.108 li
213.322 212.558 213.873 212.01 214.324 211.508 cv
214.473 211.309 214.422 211.16 214.324 211.058 cv
209.619 204.911 li
209.369 204.66 209.32 204.36 209.42 204.06 cv
210.219 203.211 210.969 202.312 211.721 201.459 cv
212.022 201.311 212.318 201.311 212.621 201.51 cv
219.325 205.361 li
219.425 205.458 219.575 205.51 219.776 205.308 cv
220.177 204.759 220.626 204.209 221.177 203.509 cv
221.177 203.462 li
221.228 203.462 li
221.726 202.76 222.179 202.16 222.577 201.662 cv
222.728 201.41 222.628 201.311 222.526 201.211 cv
217.024 195.712 li
216.774 195.462 216.724 195.213 216.774 194.861 cv
217.425 193.911 218.073 192.961 218.726 191.961 cv
219.026 191.81 219.274 191.761 219.575 191.91 cv
226.779 194.911 li
226.881 194.961 227.031 194.961 227.182 194.76 cv
227.531 194.211 227.883 193.563 228.332 192.812 cv
228.332 192.76 li
228.381 192.76 li
228.381 192.711 li
228.781 192.01 229.182 191.361 229.481 190.761 cv
229.631 190.509 229.481 190.412 229.383 190.312 cv
223.23 185.613 li
222.976 185.412 222.829 185.211 222.829 184.862 cv
223.376 183.812 223.927 182.712 224.428 181.662 cv
224.678 181.462 224.93 181.415 225.231 181.513 cv
232.734 183.512 li
232.884 183.563 233.034 183.563 233.134 183.362 cv
233.437 182.712 233.735 182.063 234.034 181.262 cv
234.034 181.213 li
234.087 181.162 li
234.384 180.412 234.687 179.713 234.886 179.063 cv
234.987 178.814 234.886 178.712 234.786 178.662 cv
228.031 174.764 li
227.781 174.664 227.631 174.464 227.58 174.164 cv
227.981 173.016 228.381 171.865 228.731 170.664 cv
228.983 170.465 229.182 170.416 229.481 170.465 cv
237.185 171.515 li
237.337 171.515 237.485 171.515 237.585 171.264 cv
237.735 170.616 237.937 169.866 238.187 169.065 cv
238.187 169.015 li
238.187 168.965 li
238.437 168.166 238.587 167.415 238.737 166.815 cv
238.837 166.514 238.687 166.466 238.587 166.415 cv
231.381 163.417 li
231.082 163.317 230.934 163.167 230.83 162.919 cv
231.133 161.667 231.332 160.466 231.582 159.216 cv
231.733 159.017 231.983 158.966 232.281 158.966 cv
240.036 158.966 li
240.189 158.966 240.34 158.966 240.389 158.668 cv
240.488 158.017 240.588 157.267 240.689 156.468 cv
240.689 156.419 li
240.689 156.369 li
240.689 156.317 li
240.84 155.518 240.888 154.767 240.988 154.115 cv
240.988 153.818 240.84 153.768 240.738 153.717 cv
233.234 151.717 li
232.937 151.669 232.734 151.518 232.635 151.269 cv
232.734 150.018 232.781 148.818 232.835 147.571 cv
233.034 147.318 233.234 147.22 233.536 147.168 cv
241.238 146.169 li
241.337 146.169 241.488 146.12 241.541 145.868 cv
241.541 143.619 li
241.541 143.57 li
241.541 143.518 li
241.541 143.468 li
241.541 141.22 li
241.488 140.97 241.337 140.919 241.238 140.919 cv
cp
ef
135.793 196.199 mo
135.793 196.556 135.468 196.855 135.076 196.855 cv
128.01 196.855 li
127.615 196.855 127.296 196.56 127.296 196.199 cv
127.296 194.772 li
127.296 194.41 127.615 194.118 128.01 194.118 cv
135.076 194.118 li
135.474 194.118 135.793 194.41 135.793 194.772 cv
135.793 196.199 li
cp
127.412 190.143 mo
127.412 189.785 127.733 189.494 128.129 189.494 cv
134.959 189.494 li
135.359 189.494 135.682 189.785 135.682 190.143 cv
135.682 191.531 li
135.682 191.888 135.359 192.18 134.959 192.18 cv
128.129 192.18 li
127.733 192.18 127.412 191.888 127.412 191.531 cv
127.412 190.143 li
cp
138.113 193.115 mo
138.02 193.077 li
137.784 192.989 li
138.011 192.881 li
138.099 192.838 li
138.661 192.566 139.022 191.965 139.022 191.307 cv
139.022 189.189 li
139.022 188.297 138.202 187.514 137.271 187.514 cv
125.683 187.514 li
124.764 187.514 124.017 188.264 124.017 189.189 cv
124.017 191.307 li
124.017 191.963 124.376 192.562 124.933 192.838 cv
125.022 192.884 li
125.248 192.992 li
125.013 193.079 li
124.92 193.115 li
124.289 193.35 123.866 193.989 123.866 194.702 cv
123.866 197.159 li
123.866 198.082 124.56 198.833 125.413 198.833 cv
137.624 198.833 li
138.479 198.833 139.175 198.082 139.175 197.159 cv
139.175 194.702 li
139.175 193.989 138.75 193.35 138.113 193.115 cv
cp
ef
119.34 198.824 mo
115.756 198.824 li
115.756 190.296 li
115.746 189.965 115.479 189.953 115.349 189.948 cv
115.168 189.948 114.967 189.993 114.776 190.035 cv
112.107 190.658 li
112.107 188.609 li
114.924 187.896 li
115.047 187.865 115.173 187.831 115.299 187.796 cv
115.781 187.663 116.28 187.528 116.749 187.525 cv
118.898 187.525 li
119.186 187.528 119.338 187.688 119.34 187.991 cv
119.34 198.824 li
cp
ef
37.8761 84.5149 mo
36.9941 83.5427 38.7844 80.7415 39.6774 82.4875 cv
39.8053 83.6607 38.6843 84.7981 37.8761 84.5149 cv
cp
56.5485 71.3672 mo
54.9893 71.4163 49.6135 72.2024 48.4634 72.8244 cv
45.7222 74.3086 44.6361 75.7479 42.9388 78.3051 cv
42.2488 79.3382 41.5006 80.7565 40.3113 79.6903 cv
39.4305 78.9021 38.5723 80.1053 37.552 79.8014 cv
36.4469 79.4733 36.49 78.491 36.0568 77.651 cv
35.44 76.4518 34.0026 77.7602 33.1875 77.9011 cv
32.5426 77.4551 32.9746 75.6257 32.3314 75.1778 cv
30.2233 75.1488 29.7521 76.4609 30.2332 78.184 cv
30.7392 79.9984 29.047 81.0473 29.1681 82.7787 cv
29.7461 83.3377 30.6202 83.1546 31.2263 82.7796 cv
32.0235 83.1317 32.3183 84.0459 32.5735 84.7929 cv
33.0004 86.0421 33.5476 85.3718 34.5418 85.3318 cv
39.5825 85.113 36.071 91.3379 35.4028 93.7739 cv
35.0439 95.0891 34.5498 96.9803 35.2699 98.2626 cv
35.7098 99.0496 36.951 101.451 37.2042 101.975 cv
38.3563 103.934 44.0059 106.676 42.0336 102.394 cv
40.7516 99.6125 38.1621 97.9255 38.6602 94.5822 cv
39.2403 90.6688 39.9595 87.7865 41.5806 84.1869 cv
42.9198 81.2234 45.7131 78.7431 48.2113 76.7901 cv
49.4397 75.8278 50.7198 75.0286 52.334 75.0057 cv
53.955 74.9847 55.6824 75.5616 57.2476 74.8806 cv
57.9578 73.9145 57.2967 72.1024 56.5485 71.3672 cv
cp
48.0693 90.4485 mo
48.0685 90.4587 48.0665 90.4675 48.0653 90.4766 cv
47.9023 92.6198 45.981 92.7088 45.7642 92.0137 cv
45.598 91.5227 46.7133 89.0814 47.8113 89.7094 cv
47.8984 89.7605 48.0863 90.1035 48.0835 90.1956 cv
48.0835 90.2495 48.0815 90.3067 48.0755 90.3625 cv
48.0724 90.3915 48.0704 90.4187 48.0693 90.4485 cv
cp
44.1471 89.3874 mo
43.1299 87.8902 44.9412 86.0781 45.3471 84.607 cv
45.5252 84.3636 45.6221 84.0337 46.0431 84.0048 cv
46.4653 83.9779 46.1222 83.9618 46.8673 84.4148 cv
47.6134 84.867 45.162 90.8868 44.1471 89.3874 cv
cp
51.7778 78.8542 mo
51.6698 78.8752 51.5028 79.0603 51.4727 79.1323 cv
50.7507 80.7913 52.313 86.0942 49.6526 86.124 cv
48.7284 84.6569 50.3537 81.6186 48.1935 80.6465 cv
46.5642 79.9102 45.4061 80.9263 44.6219 82.2735 cv
42.9538 85.1439 41.0606 88.3985 41.3957 92.0489 cv
41.9366 93.015 43.3349 92.882 43.9268 93.7901 cv
43.5509 94.9573 42.0696 95.2643 42.5008 97.0594 cv
42.5206 97.1374 42.7177 97.3684 42.7897 97.3965 cv
47.2083 99.1687 47.1672 93.3119 50.3537 93.753 cv
50.9358 94.2281 50.1406 96.0774 50.9888 96.7603 cv
53.5151 97.0285 54.7922 93.4032 53.6602 91.5116 cv
51.9558 88.6633 53.3172 87.8023 54.1481 85.043 cv
54.3772 83.1197 56.3685 81.3306 54.7143 79.3123 cv
54.3692 78.8182 52.4191 78.7241 51.7778 78.8542 cv
cp
34.0386 73.7166 mo
34.6578 73.2865 34.9047 73.3146 35.2509 72.5755 cv
35.5947 71.8463 36.128 71.2842 36.9811 71.2493 cv
38.0323 72.4754 35.857 74.5206 37.5223 75.5568 cv
39.1663 75.6909 38.5372 74.0585 40.1823 74.1934 cv
41.4966 75.9668 38.9304 76.5229 39.7095 78.6243 cv
42.3196 79.4972 43.1069 75.7539 43.0397 73.9256 cv
42.9949 72.7005 42.7236 70.8791 41.7538 70.034 cv
40.7014 69.12 39.2652 67.9179 37.9552 67.4187 cv
36.0798 66.7046 34.9617 68.0188 34.1707 69.546 cv
33.4177 70.9973 31.9864 72.2884 32.0793 74.0576 cv
32.1445 75.2736 33.6156 74.0095 34.0386 73.7166 cv
cp
34.5438 87.2843 mo
34.4809 87.1902 34.0006 87.0363 33.8586 87.0692 cv
32.1485 87.4292 32.0255 90.6467 31.1044 89.9954 cv
30.1813 89.3426 31.6983 87.2722 30.6261 86.1971 cv
27.521 85.483 29.375 89.3284 27.3058 90.4726 cv
26.8096 90.3127 26.4539 90.2866 26.3268 89.8194 cv
26.1976 89.3536 28.429 85.6389 27.6808 85.2789 cv
25.7017 83.9878 25.5376 85.995 25.3955 87.5193 cv
25.3417 88.1204 24.9366 89.1436 24.8606 89.2714 cv
23.7033 91.2658 25.2705 92.4599 27.2128 93.2291 cv
28.7321 93.831 31.9844 94.8252 33.1595 93.2821 cv
34.2416 91.8589 35.7439 89.0145 34.5438 87.2843 cv
cp
ef
196.152 31.0992 mo
196.117 31.0901 195.932 30.9261 195.871 30.8551 cv
194.486 29.2409 191.579 28.1199 189.458 27.9828 cv
189.341 27.9759 189.132 27.9257 188.997 27.8778 cv
188.997 27.8778 188.864 27.7868 188.856 27.7718 cv
188.421 27.2878 187.735 25.3685 189.296 25.8646 cv
191.013 26.4095 191.003 26.5346 192.276 26.9896 cv
193.415 27.3958 195.289 28.0028 196.301 28.4859 cv
196.338 28.5029 196.375 28.5199 196.41 28.5377 cv
196.484 28.5769 196.555 28.6149 196.619 28.6478 cv
196.598 28.6469 li
196.777 28.7498 196.947 28.8669 197.105 29.0141 cv
198.447 30.239 197.975 31.5783 196.152 31.0992 cv
cp
191.297 35.6449 mo
191.638 33.6005 194.248 35.7968 193.623 37.1559 cv
193.589 37.2259 193.377 37.3339 193.32 37.3188 cv
192.968 37.2089 192.712 36.981 192.473 36.7369 cv
192.128 36.3899 191.286 35.7228 191.297 35.6449 cv
cp
194.479 41.5875 mo
194.041 42.8486 190.661 40.6075 190.729 39.0312 cv
190.731 38.9683 190.813 38.8291 190.845 38.8263 cv
191.895 38.6823 194.922 40.3033 194.479 41.5875 cv
cp
191.895 47.1042 mo
191.835 47.1853 191.528 47.3602 191.436 47.3661 cv
189.614 47.4433 186.797 46.4881 186.749 44.3968 cv
186.724 43.2057 187.644 42.4917 188.753 42.3536 cv
189.153 42.3045 189.481 42.4137 189.786 42.5756 cv
190.278 42.8378 190.804 43.0127 191.294 43.3487 cv
191.403 43.4207 191.505 43.4967 191.599 43.5758 cv
192.786 44.5578 192.797 45.888 191.895 47.1042 cv
cp
185.46 38.3971 mo
184.94 38.1612 183.068 37.1689 183.295 36.3859 cv
183.523 35.7727 184.573 35.3786 186.645 36.7658 cv
186.729 36.8239 186.872 37.2049 186.856 37.3371 cv
186.761 38.1612 186.618 38.9323 185.46 38.3971 cv
cp
181.721 43.3126 mo
180.609 42.6127 179.773 41.3925 180.037 40.8133 cv
181.18 38.8912 185.241 39.1872 185.259 41.7905 cv
185.269 43.3316 182.814 44.0019 181.721 43.3126 cv
cp
186.153 33.7366 mo
186.542 32.6735 188.151 33.2595 188.366 34.1714 cv
188.382 34.2447 188.235 34.4214 188.161 34.4346 cv
187.448 34.5687 186.833 34.5947 186.179 33.9886 cv
186.153 33.9645 186.134 33.7916 186.153 33.7366 cv
cp
175.06 38.3491 mo
175.458 37.965 176.123 37.4981 177.332 38.5003 cv
177.393 38.5521 177.553 38.8283 177.562 38.9043 cv
178.043 42.4715 172.518 40.8983 175.06 38.3491 cv
cp
169.642 40.3234 mo
168.519 39.8383 170.211 33.4474 172.304 34.8638 cv
174.393 36.2799 170.757 40.8073 169.642 40.3234 cv
cp
200.457 27.9889 mo
196.475 25.7325 192.392 24.0074 187.864 23.2063 cv
185.659 22.8181 183.516 27.6008 185.739 28.8938 cv
186.622 29.4081 190.083 29.2609 189.954 30.7352 cv
189.952 30.7403 li
189.792 31.6622 186.405 29.9141 183.738 31.3972 cv
183.574 31.4882 183.453 31.5704 183.371 31.6413 cv
182.574 32.1825 181.914 33.1435 181.17 33.8285 cv
180.41 34.5296 179.314 36.1118 178.107 35.9107 cv
177.145 35.7449 175.493 34.1726 175.599 33.9586 cv
176.034 33.1024 177.266 33.6436 178.029 32.6604 cv
179.418 30.8701 179.121 28.7869 179.906 26.8206 cv
180.75 24.7043 184.162 25.3036 184.202 22.2591 cv
184.219 21.021 183.06 20.318 182.212 19.4886 cv
181.16 18.7357 li
180.656 18.4248 178.578 18.4537 178.912 19.9958 cv
179.074 20.7461 180.43 22.8252 179.066 23.1652 cv
177.219 23.6292 174.645 22.8071 172.856 22.3512 cv
172.544 22.2702 170.298 21.4769 169.956 21.533 cv
169.679 21.576 169.442 21.6501 169.292 21.7902 cv
168.543 22.5463 168.604 23.8742 169.218 24.6113 cv
169.229 24.6215 169.239 24.6354 169.25 24.6464 cv
169.28 24.6825 169.393 24.7735 169.442 24.7865 cv
169.841 24.8905 171.304 24.9815 171.336 24.9815 cv
172.175 24.9733 173.653 25.3115 174.731 25.7855 cv
174.731 25.7776 li
175.9 26.3267 176.544 26.7478 175.27 27.1347 cv
175.249 27.1427 175.226 27.1466 175.204 27.1557 cv
175.198 27.1577 175.192 27.1588 175.186 27.1608 cv
173.345 27.7906 170.038 26.1656 168.206 27.0936 cv
168.147 27.1228 168.02 27.2166 167.994 27.2597 cv
167.828 27.5406 167.324 28.578 167.912 28.891 cv
168.467 29.1878 169.254 29.361 169.707 29.4037 cv
170.067 29.435 172.405 29.3939 173.491 29.35 cv
173.809 29.3381 174.233 29.2198 174.333 29.1771 cv
174.532 29.0909 174.747 29.018 174.987 28.9828 cv
175.768 28.8708 176.423 29.0208 176.063 29.9751 cv
175.614 31.1661 171.302 32.3542 170.163 32.0804 cv
169.022 31.8093 167.754 33.3105 167.71 33.5356 cv
167.51 34.5885 167.611 35.7509 167.123 36.8659 cv
166.476 38.3531 165.131 40.3963 165.865 42.0576 cv
166.058 42.5977 169.417 42.7638 173.267 43.3016 cv
173.528 43.3387 173.79 43.3798 174.05 43.4138 cv
176.487 43.7847 179.049 44.3159 181.078 45.1951 cv
181.867 45.5362 182.519 45.8 183.062 46.0062 cv
185.864 47.4333 188.751 49.2256 189.204 49.7475 cv
191.431 52.3249 194.877 56.5623 196.203 54.7482 cv
196.107 52.94 195.072 51.6229 194.298 50.0727 cv
193.975 49.4155 194.861 49.1284 195.209 48.6773 cv
196.506 47.0072 196.836 44.4628 197.268 42.4588 cv
197.631 40.7844 197.871 39.0771 198.305 37.4221 cv
198.809 35.5178 196.217 34.2185 194.518 33.7295 cv
194.293 33.6654 193.896 33.2444 193.928 33.1115 cv
194.24 31.7552 196.73 32.8495 198.273 33.8285 cv
198.865 34.2035 200.396 34.1196 200.716 33.5744 cv
201.196 32.7503 201.511 31.7144 201.931 31.0561 cv
202.944 29.4691 201.747 28.7197 200.457 27.9889 cv
cp
ef
18.8997 150.902 mo
18.8427 150.051 18.8719 148.057 18.8748 146.704 cv
19.6938 146.793 20.6679 146.847 21.6633 146.855 cv
21.6712 146.972 li
20.8139 148.048 20.2769 149.506 20.379 151.067 cv
20.468 152.436 21.2031 153.29 22.3941 153.212 cv
23.2483 153.156 23.7433 152.768 24.2984 151.948 cv
25.1237 150.732 25.5957 149.302 26.5706 147.981 cv
27.6718 146.509 28.778 146.13 30.1513 146.04 cv
31.4993 145.952 34.1597 146.537 34.4877 151.592 cv
34.5498 152.537 34.6008 154.029 34.5498 155.291 cv
33.8396 155.146 32.8125 155 31.8585 154.896 cv
31.8503 154.779 li
32.5726 154.09 33.1306 153.295 33.0155 151.524 cv
32.9055 149.845 31.9285 149.079 30.9402 149.143 cv
29.7481 149.22 29.083 149.432 27.7149 152.365 cv
26.0116 156.036 24.8926 156.203 23.4754 156.297 cv
21.7662 156.407 19.2079 155.627 18.8997 150.902 cv
cp
ef
29.4281 170.72 mo
27.6738 171.023 23.6974 171.835 22.0502 172.478 cv
21.9521 171.581 21.8921 171.255 21.7701 170.605 cv
21.6752 170.093 21.5881 169.627 21.314 168.522 cv
23.4323 168.32 26.5979 167.827 28.2379 167.523 cv
28.0769 166.419 28.0001 165.881 27.8439 165.042 cv
27.6879 164.205 27.5158 163.394 27.297 162.47 cv
24.8416 162.954 22.7173 163.373 20.4831 164.054 cv
20.394 163.203 20.271 162.552 20.2018 162.18 cv
20.1029 161.644 20.021 161.202 19.7488 160.12 cv
21.8552 159.968 25.5506 159.378 27.2128 159.068 cv
28.8321 158.767 34.1557 157.92 34.6376 157.061 cv
34.7258 157.043 li
34.8508 157.958 34.9367 158.544 35.0578 159.197 cv
35.1828 159.871 35.3308 160.542 35.5049 161.233 cv
33.9915 161.227 31.8194 161.63 29.0039 162.155 cv
29.157 163.354 29.248 163.842 29.4082 164.704 cv
29.5653 165.54 29.6393 165.938 29.9443 167.204 cv
33.3307 166.55 34.8917 166.308 36.219 165.435 cv
36.2899 165.445 li
36.363 166.201 36.462 166.738 36.6221 167.599 cv
36.7429 168.249 36.9249 169.106 37.0741 169.656 cv
35.0748 169.764 31.4712 170.364 29.4281 170.72 cv
cp
ef
36.251 177.798 mo
36.223 177.706 li
34.2657 177.677 32.5684 177.707 30.7653 177.776 cv
30.9042 178.354 31.0233 178.788 31.1934 179.306 cv
31.4375 180.048 31.5622 180.356 31.7825 180.882 cv
33.2706 179.921 34.8358 178.834 36.251 177.798 cv
cp
26.4476 186.466 mo
26.2197 185.767 26.0187 185.16 25.7105 184.44 cv
27.2539 183.86 29.4451 182.444 30.4793 181.757 cv
30.2933 181.045 30.0951 180.363 29.8791 179.711 cv
29.6651 179.059 29.3881 178.352 29.2041 177.863 cv
27.93 177.884 25.1945 178.081 23.8533 178.771 cv
23.6245 177.999 23.5502 177.624 23.3654 177.063 cv
23.1672 176.454 22.9693 175.921 22.7202 175.306 cv
23.6605 175.495 25.3527 175.664 26.0535 175.708 cv
27.5289 175.798 29.6033 175.891 31.2283 175.931 cv
32.6894 175.975 35.0459 176.001 36.8651 175.978 cv
37.389 175.981 38.2483 175.997 38.7104 175.671 cv
38.8394 175.629 li
39.0753 176.35 39.2802 176.903 39.4495 177.349 cv
39.6865 177.992 39.9346 178.61 40.2215 179.263 cv
39.7914 179.478 39.0004 179.961 38.3172 180.41 cv
36.951 181.305 35.2639 182.456 33.9896 183.347 cv
31.8483 184.845 30.6383 185.716 29.578 186.536 cv
29.1221 186.885 28.0128 187.771 27.1198 188.736 cv
26.8527 187.778 26.6608 187.118 26.4476 186.466 cv
cp
ef
39.8433 198.7 mo
38.9071 199.148 35.0249 200.956 33.3877 201.925 cv
32.9795 201.016 32.5086 200.193 32.0085 199.463 cv
33.1745 197.617 35.4249 194.332 36.441 192.902 cv
39.5034 188.547 li
39.4725 188.482 li
35.5088 190.383 li
34.7567 190.742 30.7812 192.934 29.5001 193.97 cv
29.2971 193.435 29.112 192.999 28.8769 192.51 cv
28.653 192.038 28.3748 191.515 28.1208 191.086 cv
30.3282 190.633 35.688 188.144 36.7239 187.647 cv
37.516 187.267 40.7896 185.803 41.8556 184.637 cv
41.9576 184.589 li
42.2029 185.204 42.5099 185.899 42.8379 186.582 cv
43.175 187.286 43.5118 187.939 43.8188 188.473 cv
43.0468 189.367 41.3436 191.497 40.5415 192.695 cv
38.9692 195.051 37.9543 196.482 37.084 197.79 cv
37.1132 197.855 li
39.7565 196.59 li
41.2815 195.858 45.1841 193.724 45.9261 192.87 cv
46.0692 193.275 46.3462 193.904 46.5713 194.372 cv
46.8772 195.014 46.9084 195.077 47.2953 195.734 cv
45.3551 196.219 40.9214 198.183 39.8433 198.7 cv
cp
ef
45.3211 214.374 mo
44.8 214.687 43.757 215.317 42.7489 216.123 cv
41.2126 214.527 40.3635 213.443 39.2564 211.764 cv
36.5739 207.689 37.0091 204.456 41.7546 201.332 cv
44.673 199.41 48.9037 198.21 52.575 203.787 cv
53.578 205.309 54.6553 207.149 55.1534 208.068 cv
54.1042 208.361 53.2792 208.708 52.3159 209.171 cv
52.224 209.035 li
52.584 207.775 52.328 206.075 51.2337 204.413 cv
49.5285 201.825 46.8072 202.284 43.7388 204.306 cv
39.4452 207.131 39.4614 209.162 41.0357 211.557 cv
41.7507 212.643 42.4126 212.376 42.9969 211.992 cv
44.3521 211.1 li
44.9741 210.69 45.727 210.193 46.2172 209.219 cv
46.3252 209.177 li
46.6532 209.755 47.0504 210.398 47.4283 210.974 cv
47.9233 211.726 48.0653 211.942 48.5776 212.599 cv
47.8295 212.893 46.3133 213.749 45.3211 214.374 cv
cp
ef
58.8157 224.001 mo
57.4617 225.159 54.4591 227.892 53.373 229.285 cv
52.8301 228.565 52.611 228.315 52.1738 227.816 cv
51.8308 227.425 51.517 227.069 50.7158 226.259 cv
52.4349 225.004 54.9034 222.963 56.1576 221.862 cv
55.4573 220.997 55.1154 220.572 54.5524 219.934 cv
53.9902 219.292 53.426 218.685 52.768 218.002 cv
50.9037 219.671 49.2926 221.118 47.7175 222.844 cv
47.2075 222.159 46.7703 221.661 46.5203 221.376 cv
46.1611 220.967 45.8642 220.629 45.0801 219.838 cv
46.8114 218.633 49.6855 216.234 50.9579 215.12 cv
52.194 214.034 56.3365 210.585 56.3115 209.6 cv
56.3795 209.539 li
56.9556 210.265 57.3287 210.725 57.7656 211.222 cv
58.2186 211.737 58.6878 212.237 59.1899 212.743 cv
57.8846 213.51 56.2245 214.968 54.0733 216.856 cv
54.8183 217.809 55.1463 218.184 55.7235 218.84 cv
56.2866 219.482 56.5516 219.784 57.4617 220.717 cv
60.0398 218.423 61.256 217.417 61.9523 215.988 cv
62.0181 215.961 li
62.4663 216.576 62.8252 216.983 63.4033 217.644 cv
63.8404 218.143 64.4343 218.785 64.8426 219.183 cv
63.1804 220.295 60.3899 222.651 58.8157 224.001 cv
cp
ef
68.307 226.611 mo
68.2361 226.548 li
66.5368 227.519 65.0935 228.414 63.5773 229.393 cv
63.9935 229.816 64.3164 230.131 64.7255 230.488 cv
65.3135 231.004 65.5777 231.203 66.0356 231.545 cv
66.8257 229.959 67.6189 228.224 68.307 226.611 cv
cp
64.2954 239.068 mo
63.7435 238.587 63.2632 238.165 62.6302 237.702 cv
63.6604 236.416 64.8244 234.079 65.3617 232.961 cv
64.8386 232.444 64.3195 231.96 63.8024 231.507 cv
63.2853 231.055 62.6863 230.59 62.2803 230.265 cv
61.1931 230.931 58.9418 232.498 58.1406 233.772 cv
57.5495 233.226 57.2947 232.942 56.8484 232.553 cv
56.3674 232.132 55.9254 231.775 55.3972 231.373 cv
56.3016 231.057 57.8435 230.338 58.4698 230.017 cv
59.7849 229.341 61.6141 228.365 63.0344 227.569 cv
64.3136 226.861 66.3528 225.681 67.9058 224.732 cv
68.358 224.467 69.105 224.044 69.3361 223.528 cv
69.4262 223.425 li
69.9952 223.924 70.4562 224.297 70.8273 224.592 cv
71.3594 225.028 71.8884 225.43 72.4665 225.847 cv
72.2085 226.249 71.7744 227.069 71.4153 227.803 cv
70.6971 229.271 69.833 231.122 69.192 232.539 cv
68.115 234.921 67.5168 236.285 67.0258 237.532 cv
66.8106 238.064 66.3089 239.392 66.0347 240.678 cv
65.3146 239.991 64.8125 239.521 64.2954 239.068 cv
cp
ef
70.0383 243.369 mo
69.4622 242.955 69.065 242.694 68.2318 242.15 cv
70.0292 240.222 71.9343 237.622 72.9745 236.177 cv
74.4637 234.109 76.5971 231.311 76.897 229.638 cv
76.937 229.582 li
77.5062 230.049 77.9933 230.428 78.5481 230.828 cv
79.1052 231.23 79.7473 231.637 80.4325 232.101 cv
79.0173 233.499 76.546 236.971 76.044 237.665 cv
75.2139 238.818 72.8214 242.097 71.5734 244.56 cv
70.7544 243.914 70.3842 243.619 70.0383 243.369 cv
cp
ef
87.8344 245.392 mo
86.8172 247.226 85.6912 249.307 85.2761 250.058 cv
84.0299 252.306 82.0176 253.303 77.094 251.247 cv
77.5352 249.868 li
79.5384 250.694 80.7336 250.687 82.0366 248.727 cv
82.5137 248.011 83.5828 246.129 84.3689 244.709 cv
85.7343 242.245 87.9745 238.639 87.9694 236.988 cv
88.0244 236.889 li
88.7275 237.329 89.3387 237.694 89.9167 238.013 cv
90.4976 238.335 91.0669 238.625 91.7728 238.965 cv
90.3287 240.692 88.6526 243.913 87.8344 245.392 cv
cp
ef
91.7799 255.979 mo
90.8557 255.495 90.4358 255.274 90.0506 255.094 cv
89.4067 254.791 88.9684 254.612 88.0493 254.231 cv
89.4586 252.004 90.8469 249.093 91.6019 247.48 cv
92.682 245.173 94.2603 242.029 94.2452 240.329 cv
94.2733 240.267 li
94.9194 240.62 95.4682 240.9 96.0894 241.192 cv
96.7105 241.483 97.4156 241.763 98.1757 242.095 cv
97.0425 243.731 95.2593 247.599 94.8933 248.374 cv
94.2943 249.663 92.551 253.328 91.7788 255.979 cv
91.7799 255.979 li
cp
ef
104.37 248.002 mo
104.281 247.972 li
103.057 249.497 102.041 250.858 100.989 252.326 cv
101.531 252.567 101.946 252.74 102.459 252.923 cv
103.195 253.187 103.515 253.276 104.065 253.427 cv
104.219 251.662 104.32 249.758 104.37 248.002 cv
cp
105.204 261.065 mo
104.514 260.817 103.912 260.603 103.152 260.402 cv
103.64 258.83 103.867 256.229 103.957 254.992 cv
103.281 254.701 102.621 254.441 101.974 254.21 cv
101.328 253.98 100.599 253.767 100.101 253.612 cv
99.3338 254.631 97.8136 256.913 97.5367 258.395 cv
96.7865 258.102 96.4446 257.931 95.8884 257.732 cv
95.2854 257.518 94.7422 257.346 94.1032 257.166 cv
94.8312 256.54 96.0015 255.307 96.4664 254.777 cv
97.4425 253.667 98.7869 252.088 99.814 250.829 cv
100.746 249.699 102.211 247.854 103.308 246.402 cv
103.631 245.991 104.172 245.322 104.198 244.758 cv
104.245 244.63 li
104.957 244.886 105.522 245.064 105.975 245.203 cv
106.63 245.413 107.268 245.593 107.96 245.77 cv
107.868 246.237 107.765 247.158 107.7 247.972 cv
107.569 249.604 107.444 251.642 107.366 253.193 cv
107.237 255.805 107.181 257.293 107.181 258.634 cv
107.177 259.209 107.195 260.627 107.411 261.926 cv
106.489 261.548 105.85 261.296 105.204 261.065 cv
cp
ef
114.412 255.971 mo
113.664 259.454 114.095 262.061 116.732 262.628 cv
119.835 263.296 121.021 260.369 121.667 257.37 cv
122.273 254.549 122.476 251.134 119.466 250.488 cv
116.435 249.834 115.119 252.688 114.412 255.971 cv
cp
125.193 258.083 mo
124.454 261.522 122.59 265.456 116.412 264.127 cv
112.661 263.321 109.538 261.52 110.899 255.192 cv
111.69 251.512 113.54 247.643 119.696 248.968 cv
124.974 250.103 126.241 253.213 125.193 258.083 cv
cp
ef
144.435 253.729 mo
144.296 253.723 li
143.782 253.457 142.186 253.083 140.222 253.011 cv
140.205 253.484 140.023 256.543 139.905 259.791 cv
139.788 262.989 139.976 266.267 140.076 266.791 cv
139.133 266.711 138.872 266.679 138.044 266.65 cv
137.333 266.623 136.814 266.603 135.935 266.64 cv
136.34 264.668 136.539 260.48 136.596 258.947 cv
136.655 257.325 136.712 254.395 136.746 252.885 cv
135.088 252.825 132.953 252.926 132.325 253.288 cv
132.182 253.283 li
132.348 252.634 132.523 251.715 132.544 251.13 cv
134.741 251.344 136.538 251.433 138.547 251.506 cv
140.725 251.584 142.83 251.662 144.987 251.584 cv
144.756 252.093 144.583 252.967 144.435 253.729 cv
cp
ef
148.828 259.252 mo
149.127 262.801 150.301 265.169 152.989 264.941 cv
156.149 264.677 156.433 261.531 156.175 258.477 cv
155.934 255.6 155.132 252.272 152.065 252.53 cv
148.973 252.792 148.547 255.903 148.828 259.252 cv
cp
159.758 258.128 mo
160.052 261.634 159.417 265.941 153.12 266.47 cv
149.297 266.793 145.784 265.979 145.243 259.53 cv
144.927 255.777 145.566 251.542 151.842 251.012 cv
157.222 250.56 159.339 253.164 159.758 258.128 cv
cp
ef
174.116 255.41 mo
174.341 256.423 175.227 260.614 175.801 262.427 cv
174.827 262.62 173.917 262.893 173.091 263.217 cv
171.556 261.664 168.864 258.73 167.699 257.418 cv
164.148 253.452 li
164.078 253.469 li
165.035 257.759 li
165.219 258.574 166.457 262.939 167.177 264.419 cv
166.611 264.499 166.144 264.581 165.613 264.698 cv
165.105 264.811 164.531 264.962 164.057 265.116 cv
164.111 262.862 162.896 257.082 162.644 255.959 cv
162.455 255.1 161.766 251.581 160.869 250.28 cv
160.844 250.17 li
161.502 250.069 162.246 249.927 162.986 249.762 cv
163.746 249.593 164.459 249.411 165.049 249.233 cv
165.746 250.186 167.437 252.327 168.422 253.376 cv
170.364 255.438 171.528 256.749 172.61 257.895 cv
172.675 257.878 li
172.04 255.018 li
171.671 253.37 170.474 249.085 169.809 248.169 cv
170.235 248.122 170.911 247.995 171.417 247.882 cv
172.112 247.726 172.183 247.71 172.903 247.479 cv
172.938 249.48 173.856 254.244 174.116 255.41 cv
cp
ef
190.628 253.667 mo
190.813 254.247 191.186 255.406 191.743 256.571 cv
189.835 257.702 188.585 258.28 186.696 258.974 cv
182.117 260.648 179.068 259.483 177.115 254.148 cv
175.911 250.867 175.716 246.475 181.986 244.18 cv
183.697 243.552 185.737 242.925 186.745 242.651 cv
186.792 243.74 186.938 244.622 187.169 245.666 cv
187.013 245.724 li
185.872 245.084 184.156 244.944 182.289 245.627 cv
179.377 246.694 179.201 249.447 180.465 252.898 cv
182.23 257.726 184.211 258.176 186.903 257.192 cv
188.124 256.744 188.019 256.038 187.776 255.382 cv
187.218 253.857 li
186.964 253.161 186.653 252.313 185.815 251.611 cv
185.8 251.497 li
186.436 251.312 187.155 251.072 187.802 250.836 cv
188.647 250.527 188.89 250.438 189.644 250.09 cv
189.761 250.888 190.247 252.558 190.628 253.667 cv
cp
ef
206.874 237.059 mo
207.71 238.555 208.7 240.353 209.59 241.845 cv
211.045 244.284 211.096 246.774 207.03 249.199 cv
202.761 251.745 200.827 250.719 199.211 248.009 cv
198.795 247.312 197.727 245.429 196.977 244.17 cv
196.445 243.28 194.676 240.081 193.484 239.427 cv
193.451 239.369 li
194.004 239.091 194.685 238.711 195.297 238.346 cv
195.904 237.983 196.393 237.692 197.15 237.162 cv
197.779 239.043 199.877 242.518 200.421 243.429 cv
201.77 245.693 202.669 247.154 203.241 247.652 cv
204.046 248.353 205.288 248.452 206.468 247.748 cv
209.255 246.087 208.455 244.331 206.7 241.39 cv
204.241 237.264 203.378 235.679 201.808 234.385 cv
202.257 234.17 202.655 233.956 203.366 233.533 cv
203.997 233.158 204.329 232.932 204.796 232.602 cv
205.394 234.53 206.364 236.157 206.874 237.059 cv
cp
ef
220.511 230.427 mo
221.157 231.239 223.788 234.618 225.098 235.998 cv
224.306 236.6 223.608 237.241 223.005 237.893 cv
220.948 237.169 217.243 235.709 215.621 235.04 cv
210.691 233.029 li
210.637 233.073 li
213.375 236.512 li
213.895 237.164 216.921 240.547 218.214 241.566 cv
217.741 241.883 217.357 242.16 216.928 242.499 cv
216.524 242.824 216.073 243.21 215.713 243.554 cv
214.777 241.504 211.154 236.839 210.438 235.94 cv
209.891 235.252 207.731 232.388 206.355 231.61 cv
206.284 231.522 li
206.833 231.144 207.438 230.689 208.033 230.218 cv
208.643 229.732 209.203 229.257 209.655 228.839 cv
210.701 229.391 213.156 230.575 214.502 231.089 cv
217.151 232.095 218.771 232.763 220.245 233.321 cv
220.3 233.277 li
218.474 230.983 li
217.421 229.661 214.471 226.333 213.471 225.802 cv
213.83 225.571 214.383 225.16 214.791 224.837 cv
215.346 224.395 215.402 224.35 215.953 223.826 cv
216.862 225.612 219.769 229.491 220.511 230.427 cv
cp
ef
229.856 231.453 mo
229.346 231.947 229.024 232.294 228.338 233.019 cv
226.756 230.912 224.526 228.581 223.284 227.305 cv
221.511 225.476 219.13 222.887 217.534 222.299 cv
217.487 222.25 li
218.043 221.77 218.5 221.358 218.993 220.881 cv
219.487 220.402 219.999 219.843 220.579 219.249 cv
221.706 220.888 224.691 223.927 225.289 224.541 cv
226.277 225.561 229.088 228.489 231.294 230.148 cv
230.516 230.843 230.16 231.156 229.856 231.453 cv
cp
ef
231.633 210.97 mo
232.368 212.224 233.53 214.124 234.532 215.795 cv
235.536 217.466 237.525 220.793 238.415 222.212 cv
237.845 222.844 237.294 223.589 236.827 224.342 cv
234.4 223.259 231.924 222.23 229.371 221.191 cv
227.383 220.392 225.496 219.615 224.161 219.125 cv
223.345 218.831 222.214 218.487 221.661 218.51 cv
221.593 218.451 li
222.091 217.974 222.616 217.394 223.108 216.786 cv
223.63 216.175 224.125 215.57 224.553 215 cv
225.031 215.411 225.891 215.898 226.496 216.23 cv
227.49 216.771 229.262 217.543 231.184 218.349 cv
232.605 218.945 233.61 219.401 234.81 219.837 cv
234.872 219.766 li
234.261 218.711 232.944 216.678 232.29 215.71 cv
230.662 213.349 229.395 211.606 228.111 210.849 cv
228.531 210.428 228.871 210.068 229.274 209.6 cv
229.658 209.151 229.967 208.791 230.332 208.262 cv
230.693 209.259 231.201 210.225 231.633 210.97 cv
cp
ef
249.074 207.758 mo
247.723 209.587 246.944 210.775 246.092 212.029 cv
245.19 213.361 244.922 213.752 243.529 215.924 cv
241.756 214.322 239.942 213.06 237.499 211.402 cv
234.98 209.691 231.896 207.452 230.82 207.552 cv
230.764 207.514 li
231.737 206.2 232.96 204.4 233.651 203.381 cv
234.21 202.559 235.163 201.114 236.39 199.231 cv
236.679 199.685 237.456 200.385 237.923 200.702 cv
237.87 200.78 li
236.87 201.531 235.609 203.108 234.292 205.046 cv
235.411 206.007 237.489 207.361 238.478 208.031 cv
239.317 206.799 239.962 205.807 240.609 204.413 cv
241.047 204.853 241.664 205.388 242.229 205.8 cv
241.041 206.824 240.342 207.896 239.702 208.836 cv
241.924 210.343 li
244.031 211.775 244.52 211.735 245.305 210.578 cv
246.303 209.109 247.127 207.495 247.307 206.187 cv
247.386 206.069 li
247.96 206.83 248.479 207.269 249.074 207.758 cv
cp
ef
241.188 193.356 mo
240.859 193.985 240.651 194.436 240.501 194.866 cv
241.399 195.439 242.58 196.054 242.92 196.23 cv
243.801 196.688 244.289 196.968 245.108 197.396 cv
245.393 196.902 245.565 196.618 245.75 196.261 cv
246.458 194.896 246.352 193.637 244.27 192.556 cv
242.512 191.64 241.637 192.494 241.188 193.356 cv
cp
255.68 195.394 mo
255.353 196.025 255.128 196.55 254.745 197.336 cv
253.568 196.964 252.284 196.697 250.834 196.451 cv
249.388 196.206 248.314 196.072 247.744 196.337 cv
247.172 196.601 246.877 197.221 246.449 198.091 cv
247.57 198.622 251.314 200.515 252.876 200.928 cv
252.53 201.497 252.173 202.136 251.843 202.767 cv
251.517 203.396 251.232 203.995 250.978 204.583 cv
249.189 203.28 245.457 201.366 244.277 200.752 cv
242.258 199.701 238.589 197.712 237.386 197.73 cv
237.327 197.698 li
237.915 196.616 238.351 195.777 238.909 194.705 cv
239.554 193.464 240.016 192.53 240.704 191.209 cv
242.123 188.478 243.947 188.386 245.61 189.251 cv
247.328 190.145 248.293 191.954 247.482 194.2 cv
247.522 194.22 li
248.142 193.127 248.987 192.82 250.001 192.922 cv
250.702 192.994 250.915 193.023 252.152 193.185 cv
253.743 193.399 255.68 193.686 256.635 193.411 cv
256.754 193.471 li
256.267 194.313 255.941 194.89 255.68 195.394 cv
cp
ef
259.041 187.797 mo
258.737 188.593 257.877 190.392 257.309 191.62 cv
256.601 191.197 255.739 190.738 254.839 190.316 cv
254.882 190.206 li
256.108 189.587 257.207 188.487 257.768 187.029 cv
258.262 185.746 257.949 184.664 256.834 184.236 cv
256.036 183.929 255.423 184.074 254.575 184.586 cv
253.319 185.346 252.292 186.448 250.853 187.239 cv
249.236 188.115 248.072 187.998 246.789 187.505 cv
245.526 187.021 243.358 185.375 245.172 180.647 cv
245.512 179.763 246.088 178.386 246.664 177.264 cv
247.249 177.692 248.117 178.254 248.944 178.748 cv
248.902 178.858 li
247.957 179.18 247.117 179.67 246.481 181.327 cv
245.879 182.896 246.443 184 247.369 184.356 cv
248.487 184.783 249.177 184.871 251.648 182.777 cv
254.73 180.158 255.818 180.473 257.143 180.982 cv
258.742 181.597 260.738 183.377 259.041 187.797 cv
cp
ef
262.467 177.207 mo
262.268 177.891 262.158 178.352 261.924 179.318 cv
259.506 178.271 256.415 177.347 254.706 176.85 cv
252.259 176.138 248.907 175.065 247.232 175.342 cv
247.166 175.324 li
247.414 174.631 247.608 174.046 247.799 173.388 cv
247.99 172.728 248.16 171.99 248.369 171.186 cv
250.159 172.054 254.259 173.22 255.081 173.459 cv
256.445 173.854 260.336 175.012 263.074 175.363 cv
262.74 176.351 262.584 176.798 262.467 177.207 cv
cp
ef
253.161 158.791 mo
253.132 158.931 li
252.788 159.393 252.163 160.909 251.78 162.838 cv
252.245 162.93 255.237 163.599 258.422 164.232 cv
261.561 164.859 264.827 165.195 265.359 165.182 cv
265.13 166.102 265.058 166.352 264.893 167.164 cv
264.755 167.861 264.655 168.371 264.55 169.243 cv
262.668 168.531 258.565 167.665 257.061 167.365 cv
255.468 167.048 252.587 166.521 251.101 166.25 cv
250.777 167.875 250.538 169.999 250.792 170.679 cv
250.766 170.817 li
250.152 170.551 249.275 170.23 248.695 170.116 cv
249.259 167.983 249.634 166.223 250.027 164.25 cv
250.452 162.115 250.864 160.048 251.13 157.904 cv
251.597 158.214 252.433 158.525 253.161 158.791 cv
cp
ef
253.98 146.606 mo
255.148 147.535 256.364 148.419 260.68 151.203 cv
262.162 151.325 262.971 151.393 264.056 151.414 cv
265.071 151.426 266.337 151.438 267.073 151.309 cv
266.935 152.153 266.888 152.717 266.835 153.357 cv
266.779 154.017 266.751 154.371 266.726 155.461 cv
266.07 155.216 264.596 154.949 263.834 154.885 cv
262.756 154.796 261.93 154.657 260.445 154.532 cv
256.817 156.01 253.702 157.556 252.923 157.943 cv
252.427 158.185 251.519 158.752 251.171 159.127 cv
251.081 159.119 li
251.194 158.321 251.282 157.545 251.349 156.742 cv
251.415 155.941 251.462 155.113 251.493 154.212 cv
252.056 154.237 252.632 154.119 253.12 153.944 cv
254.331 153.524 256.004 153.021 258.656 151.865 cv
258.662 151.794 li
257.244 150.891 255.163 149.815 253.943 149.238 cv
253.357 148.953 252.517 148.715 251.952 148.715 cv
252.044 148.13 252.101 147.731 252.169 146.905 cv
252.22 146.292 252.269 145.703 252.249 145.154 cv
252.833 145.751 253.642 146.363 253.98 146.606 cv
cp
ef
252.98 83.2858 mo
252.851 85.466 250.546 86.9342 248.724 87.9563 cv
246.942 88.9505 244.572 86.6051 244.174 85.1178 cv
243.977 84.3949 243.785 82.1247 244.43 81.6045 cv
245.174 81.0066 246.244 81.4754 246.998 80.8523 cv
247.067 80.7993 247.149 80.4654 247.137 80.3754 cv
246.877 78.226 250.138 79.5783 251.843 80.9263 cv
252.359 81.3325 253 82.8946 252.98 83.2858 cv
cp
257.387 97.3075 mo
257.246 96.6895 256.79 95.0392 256.737 93.9591 cv
256.735 93.963 li
256.677 91.1348 255.998 88.6724 255.616 85.877 cv
255.452 84.664 254.794 80.1543 256.902 80.1895 cv
257.031 80.1915 257.414 79.7243 257.426 79.5802 cv
257.615 77.3589 256.175 76.4838 254.194 77.291 cv
253.095 77.7369 252.474 77.8861 251.425 77.201 cv
251.204 77.0579 249.068 75.8417 247.106 74.5376 cv
245.867 73.7186 242.088 70.8351 242.088 70.8351 cv
240.365 69.8051 238.65 67.1958 237.628 70.1791 cv
238.948 72.8296 241.922 73.7765 243.961 75.6248 cv
244.963 76.502 245.649 78.423 243.608 77.7432 cv
241.611 77.029 239.328 74.5666 238.103 73.8646 cv
236.956 73.2003 234.308 72.9416 235.222 75.0488 cv
235.761 76.2888 236.757 77.3851 237.997 77.9611 cv
238.683 78.2801 241.089 79.0691 241.231 79.6092 cv
241.604 80.3783 241.44 82.3015 240.893 82.9745 cv
239.997 84.0749 237.601 82.3224 236.448 81.4165 cv
236.382 81.3625 235.884 81.0434 235.198 80.6363 cv
234.442 80.1812 232.785 79.4013 231.678 78.8982 cv
231.108 78.6421 229.932 78.226 229.59 78.125 cv
228.375 77.763 224.519 76.8119 225.279 79.5402 cv
225.291 79.5822 225.389 79.7254 225.52 79.8144 cv
225.912 80.0914 226.844 80.6995 227.899 81.2784 cv
228.912 81.8346 233.543 83.2646 235.243 84.1789 cv
236.843 85.0419 238.687 85.481 240.05 86.7542 cv
240.624 87.2943 240.833 87.7612 240.948 88.2565 cv
241.066 88.7515 241.664 91.7299 241.664 92.7931 cv
241.664 95.4982 240.969 98.6907 240.336 100.736 cv
239.683 102.851 237.81 106.341 241.231 106.469 cv
244.641 106.597 244.512 95.3874 244.707 92.9201 cv
244.766 92.1688 245.026 88.7946 246.508 90.0326 cv
248.978 92.1027 248.335 95.4642 248.634 98.2277 cv
248.716 99.0187 249.409 99.2307 250.097 99.4377 cv
250.325 99.5077 251.212 99.4678 251.316 99.3047 cv
251.878 98.4066 251.964 97.2644 251.905 96.2262 cv
251.808 94.424 250.95 91.9159 251.659 90.1176 cv
252.153 89.0874 252.931 88.7393 253.292 89.9975 cv
253.308 90.0525 253.323 90.0916 253.341 90.1355 cv
253.444 90.5137 253.601 91.6927 253.595 91.9417 cv
253.55 93.965 254.319 99.3307 254.423 99.4658 cv
255.22 100.522 256.684 101.101 257.709 99.7028 cv
258.059 99.2818 257.524 97.9255 257.387 97.3075 cv
cp
ef
155.362 191.743 mo
155.362 192.101 155.04 192.393 154.645 192.393 cv
147.654 192.393 li
147.254 192.393 146.93 192.101 146.93 191.743 cv
146.93 190.139 li
146.93 189.785 147.254 189.493 147.654 189.493 cv
147.654 189.499 li
154.645 189.499 li
155.032 189.499 155.362 189.795 155.362 190.146 cv
155.362 191.743 li
cp
157.257 187.514 mo
145.042 187.514 li
144.187 187.514 143.494 188.266 143.494 189.195 cv
143.494 192.763 li
143.494 193.684 144.187 194.436 145.042 194.436 cv
149.836 194.438 li
154.645 194.442 li
155.032 194.442 155.362 194.74 155.362 195.091 cv
155.362 196.206 li
155.362 196.562 155.04 196.852 154.645 196.852 cv
147.647 196.852 li
147.365 196.852 147.127 196.705 147.01 196.492 cv
143.494 196.492 li
143.494 197.162 li
143.494 198.084 144.187 198.836 145.042 198.836 cv
157.257 198.836 li
158.108 198.836 158.802 198.084 158.802 197.158 cv
158.802 189.195 li
158.802 188.266 158.108 187.514 157.257 187.514 cv
cp
ef
166.562 194.604 mo
166.562 194.247 166.881 193.955 167.275 193.955 cv
174.267 193.955 li
174.665 193.955 174.993 194.247 174.993 194.604 cv
174.993 196.208 li
174.993 196.565 174.665 196.857 174.267 196.857 cv
174.267 196.849 li
167.275 196.849 li
166.887 196.849 166.562 196.552 166.562 196.201 cv
166.562 194.604 li
cp
164.662 198.836 mo
176.881 198.836 li
177.732 198.836 178.428 198.082 178.428 197.156 cv
178.428 193.587 li
178.428 192.664 177.732 191.912 176.881 191.912 cv
172.085 191.91 li
167.275 191.908 li
166.887 191.908 166.562 191.609 166.562 191.257 cv
166.562 190.144 li
166.562 189.787 166.881 189.496 167.275 189.496 cv
174.274 189.496 li
174.556 189.496 174.796 189.644 174.911 189.859 cv
178.428 189.859 li
178.428 189.186 li
178.428 188.263 177.732 187.513 176.881 187.513 cv
164.662 187.513 li
163.814 187.513 163.121 188.265 163.121 189.192 cv
163.121 197.156 li
163.121 198.082 163.814 198.836 164.662 198.836 cv
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
